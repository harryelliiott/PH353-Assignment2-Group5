
import numpy as np
import random

def H(x): # defining the Hamiltonian
    H = x**2
    return H

configurations = 100000
x = 0
d = 0.1
t = 4

def met_alg(x_initial, d): 
    # d = amount that x is changed by 
    x_new = x + np.random.uniform(-d,d) # interval of fixed width, 2d 
    H_change = H(x_new) - H(x)
    if H_change < 0:
        return x_new
    elif H_change > 0:
        return x 
    
x_array = np.zeros(int(configurations)) # storage to be filled with values of x 

for n in range(configurations):
    x = met_alg(x, d)
    x_array[n] = x
 

def U(beta):
    z_array = np.zeros(round(int(configurations)/t))
    U_array = np.zeros(round(int(configurations)/t))
    placeholder1 = np.zeros(int(t))
    placeholder2 = np.zeros(int(t))
    for n in range(round(int(configurations/t))):
        for i in range(t):
            placeholder1[i] = np.exp(-beta*H(x_array[4*n+1]))
            placeholder2[i] = H(x_array[4*n+1]) * np.exp(-beta*H(x_array[4*n+1]))
        exp_array[n] = sum(placeholder1)/len(placeholder1)
        U_array[n] = sum(placeholder2)/len(placeholder2)
    Z = sum(exp_array)/len(exp_array)
    U = sum(U_array)/(len(U_array)*Z)
    delta_U = sum((U_array-U)**2)/(len(U_array)*(len(U_array)-1))
    result = np.zeros(1,2)
    result[0,0],[0,1] = U,delta_U
    return result
    
        
print(x_array)